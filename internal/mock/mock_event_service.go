// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dzakaammar/event-scheduling-example/internal (interfaces: EventService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "github.com/dzakaammar/event-scheduling-example/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventService) CreateEvent(arg0 context.Context, arg1 *internal.CreateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventServiceMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventService)(nil).CreateEvent), arg0, arg1)
}

// DeleteEventByID mocks base method.
func (m *MockEventService) DeleteEventByID(arg0 context.Context, arg1 *internal.DeleteEventByIDRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventByID indicates an expected call of DeleteEventByID.
func (mr *MockEventServiceMockRecorder) DeleteEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventByID", reflect.TypeOf((*MockEventService)(nil).DeleteEventByID), arg0, arg1)
}

// FindEventByID mocks base method.
func (m *MockEventService) FindEventByID(arg0 context.Context, arg1 *internal.FindEventByIDRequest) (*internal.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByID", arg0, arg1)
	ret0, _ := ret[0].(*internal.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByID indicates an expected call of FindEventByID.
func (mr *MockEventServiceMockRecorder) FindEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByID", reflect.TypeOf((*MockEventService)(nil).FindEventByID), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockEventService) UpdateEvent(arg0 context.Context, arg1 *internal.UpdateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventServiceMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventService)(nil).UpdateEvent), arg0, arg1)
}
