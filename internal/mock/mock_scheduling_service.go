// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dzakaammar/event-scheduling-example/internal/core (interfaces: SchedulingService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	core "github.com/dzakaammar/event-scheduling-example/internal/core"
	gomock "github.com/golang/mock/gomock"
)

// MockSchedulingService is a mock of SchedulingService interface.
type MockSchedulingService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulingServiceMockRecorder
}

// MockSchedulingServiceMockRecorder is the mock recorder for MockSchedulingService.
type MockSchedulingServiceMockRecorder struct {
	mock *MockSchedulingService
}

// NewMockSchedulingService creates a new mock instance.
func NewMockSchedulingService(ctrl *gomock.Controller) *MockSchedulingService {
	mock := &MockSchedulingService{ctrl: ctrl}
	mock.recorder = &MockSchedulingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulingService) EXPECT() *MockSchedulingServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockSchedulingService) CreateEvent(arg0 context.Context, arg1 *core.CreateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockSchedulingServiceMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockSchedulingService)(nil).CreateEvent), arg0, arg1)
}

// DeleteEventByID mocks base method.
func (m *MockSchedulingService) DeleteEventByID(arg0 context.Context, arg1 *core.DeleteEventByIDRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventByID indicates an expected call of DeleteEventByID.
func (mr *MockSchedulingServiceMockRecorder) DeleteEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventByID", reflect.TypeOf((*MockSchedulingService)(nil).DeleteEventByID), arg0, arg1)
}

// FindEventByID mocks base method.
func (m *MockSchedulingService) FindEventByID(arg0 context.Context, arg1 *core.FindEventByIDRequest) (*core.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByID", arg0, arg1)
	ret0, _ := ret[0].(*core.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByID indicates an expected call of FindEventByID.
func (mr *MockSchedulingServiceMockRecorder) FindEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByID", reflect.TypeOf((*MockSchedulingService)(nil).FindEventByID), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockSchedulingService) UpdateEvent(arg0 context.Context, arg1 *core.UpdateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockSchedulingServiceMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockSchedulingService)(nil).UpdateEvent), arg0, arg1)
}
